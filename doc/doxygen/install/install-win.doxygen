/**

  @page install_win Building %OpenMS on Windows

  @section install_win_read Introduction


  This document addresses %OpenMS users and explains the
  installation procedure for building %OpenMS from its sources. If you only want to use the %OpenMS PiPeline (TOPP), you are strongly
  encouraged to <b>download the windows binary installer</b>
  (see <a href="http://www.OpenMS.de/download/" target="_blank">here</a>),
  instead of building %OpenMS from sources.
  For more information read the install instructions for the TOPP binaries.

  This document especially considers the installation of several libraries which are required by %OpenMS.
  Most of these libraries are made available in our "contrib-package" (see below).
  <br>
  If you encounter errors during configuring/compiling our software,
  search in our <a href="https://github.com/OpenMS/OpenMS/issues">issue tracker</a>,
  already known. If not, please write to the mailing list (open-ms-general AT lists.sourceforge.net) or report the error
  on our <a href="https://github.com/OpenMS/OpenMS/issues">issue tracker</a>.
  <br>
  <br>


  <b>Notation of this tutorial</b>
     <ul>
        <li>A string in &lt;&gt; is something the user needs to choose e.g. &lt;path_to_contrib&gt; means that this string should be replaced by the path where the user put the %OpenMS contrib package.
            Usually all commands where this is necessary come with examples, so don't worry.
        <li>Whenever you added a path to your Windows PATH Environment variable, every Command Prompt which is already open will not contain these changes. Please open a new Command Prompt.
     </ul>


  @section install_win_setup Setup of environment

    <b>Pre-Requisites (Software)</b>
    <ul>
      <li><b>Microsoft Visual C++ Compiler</b>: Comes with <a href="https://visualstudio.microsoft.com/de/downloads/?q=build+tools">
          Microsoft Visual Studio Build Tools</a>. Scroll to the bottom of the page to get the build tools only.
          If you want, you can also download the full Visual Studio (Community/Pro/Enterprise) IDE.<br>
        <b>%OpenMS requires at least Visual Studio 2019 (version 16.8.4 from January 2021) or later.
        Earlier versions have compiler bugs and may not compile without modifications to the %OpenMS codebase.</b>
        <br><b>Not supported (or at least not tested) is MinGW (g++ based compiler). Do not use a MinGW-enabled shell since CMake will get confused! Please use the Command Prompt of the Visual Studio version you want to build with or load vcvarsall.sh (see below).</b>
            Other compilers which are close to the VS toolchain might work, but are not tested.
      <li><b>CMake</b>: Have CMake (>= 3.24) installed (see http://www.cmake.org). <br>
	      If you are using Visual Studio 2019+ as IDE, make sure CMake's Generator (-G flag) supports your version of Visual Studio. If it doesn't, please upgrade CMake.<br>
      <li><b>7-Zip</b>: To extract archives within submodules of the contrib you will need <tt>7-Zip</tt> (see http://www.7-zip.org/)
        <br>7z.exe is searched in `C:\Program Files\7-Zip\` and `C:\Programme\7-Zip\`. Make sure it is in either of these locations or add
        the installation directory to your PATH.
    </ul>

  @section install_win_required Installing required dependency libraries

	@subsection install_qt QT installation

    Qt comes in two flavors: commercial or non-commercial - choose whatever is applicable to you: read more on the Qt website.
    For several recent Qt6 versions, there are binary development versions available for the most recent compilers. 

    <b>Installation of Qt6 via the Qt6 installer (requires an admin account)</b>:<br>
    Go to https://www.qt.io/download and find the download for the Qt binaries installer, download it and run the Qt binary installer.
    You will need to create a free user account with Qt, and log into that account during installation.
    The installer will ask for an installation directory, choose, e.g. `c:\dev\qt6`.
    From the components choose a matching version, e.g. Qt 6.7.1 and pick the MSVC binaries (e.g. `MSVC 2019 64-bit`), the `Sources` (for Qt headers) and `Qt Debug Information files` (optional).
    
    @image html qt6_windows_installer.png
    @image latex qt6_windows_installer.png "" width=10cm
    
    If your Visual Studio version is more recent than the VS offered by the Qt installer, choose the closest available -- they should be compatible.
    Resulting files appear under `c:\dev\qt6\$VERSION` (if you chose `c:\dev\qt6` as installation directory).

    <b>Alternatively (no admin account required)</b>, compile Qt from sources. We cannot cover all the details here. See https://wiki.qt.io/Building_Qt_6_from_Git for details.
    
    Finally, add the Qt bin directory (i.e the location of <b>Qt6Core.dll</b>, e.g. `C:\dev\qt6\6.7.1\msvc2019_64\bin`)to your Windows PATH Environment variable.
    If you forget this, starting any %OpenMS executable will result in an error such as `The program can't start because Qt6Networkd.dll is missing from your computer.`
    
    In addition, to run any of %OpenMS' GUI apps (such as TOPPView), you need set the `QT_PLUGIN_PATH` environment variable to the `plugins` subdir of your Qt installation.
    E.g. set `QT_PLUGIN_PATH` to `c:\dev\qt6_2\6.7.3\msvc2019_64\plugins`.

  @subsection correct_cmd_line Using the correct command line
  
  For most of the steps below you need a command prompt which is aware of where components of Visual Studio (compiler, linker etc) are installed.
  Do not use a plain 'cmd' Command prompt. Certain steps will fail or find the wrong components (mostly when running CMake).
  
  Open a <b>VisualStudio Developer Command prompt for x64 (64-bit) since %OpenMS only builds as 64-bit!</b> (by default you may get a 32-bit environment)<br>
  @note Recent versions of Visual Studio have a (well hidden) batch-file which correctly configures your environment for 64-bit builds. 
  It should be located at
  <ul>
  <li>VS2019:<tt>"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"</tt>
  <li>VS2022:<tt>"C:\Program Files\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"</tt>
  </ul>
  <br>Use our <tt>tools/load_vcvarsall.sh</tt> if you are building in bash on Windows.
  
  @subsection install_win_contrib Contrib installation
        
    %OpenMS depends on several other libraries. On a Windows system, these are usually not present.
    In order to make the installation of the remaining required libraries easier, we composed a
    "contrib-package" containing the libraries Boost, Eigen, CoinMP, libSVM, libHDF5, glpk, zlib, libbz2 and Xerces-C.
    This contrib package has several advantages over manual installation
    <ul>
        <li>You get all the libraries in versions tested with %OpenMS.</li>
        <li>It contains a batch script that builds all the libraries in one step.</li>
        <li>You don't have to spend hours reading installation instructions of all the libraries.</li>
        <li>We applied some patches to the libraries to fix some bugs. <BR><b>These bugs may be fatal if you do not use the contrib package.</b></li>
    </ul>

    @b Download:

    For development and cutting edge functionalities we recommend using the Git version of %OpenMS from GitHub.

    We will now clone %OpenMS and checkout with the <b>contrib submodule</b> (and other submodules e.g. for search engines along with it).<br>
    The contrib sources are located in the `contrib` subfolder of the %OpenMS source repository.
    
    To obtain the latest (potentially unstable) version of %OpenMS (and its contrib) use:
    \code
    git clone --recurse-submodules https://github.com/OpenMS/OpenMS
    \endcode
    
    If you want to use a release version of %OpenMS, use the corresponding Release-tagged version
    on GitHub (https://github.com/OpenMS/OpenMS/tags), e.g.
    \code
    git clone --recurse-submodules https://github.com/OpenMS/OpenMS --branch release/3.2.0
    \endcode
    

    @b Installation:

    After you got the source code for the contrib package follow these steps:

    <ol>
      <li>Create a build directory for the %OpenMS contrib<br>
          e.g. <tt>mkdir contrib_build</tt>
      <li>Call CMake to build the contrib<br>

        \code
        cd <path_to_contrib_build>
        cmake -DBUILD_TYPE=ALL -DNUMBER_OF_JOBS=8 -G "<generator>" -A x64 "<path_to_contrib>"
        \endcode

        The <tt>&lt;generator&gt;</tt> you use must be one of the Visual Studio Generators. This is because some contrib libs require Visual Studio to build.
        If you are lucky, CMake chooses the correct Generator even without specifying.
        Use the <tt>-A x64</tt> flag to build 64-bit libraries for the contrib to make double sure you build 64-bit. (32-bit does not really make any sense for LC-MS data processing)
        Type <tt>cmake -help</tt> to see a list of available generators.<br>

        Example:
        \code
        cd c:\dev\contrib_build
        cmake -DBUILD_TYPE=ALL -DNUMBER_OF_JOBS=8 -G "Visual Studio 16 2019" -A x64 "c:\dev\OpenMS\contrib"
        \endcode

      <li>Add the <tt>&lt;path_to_contrib_build&gt;/lib</tt> directory to your PATH Environment Variable (this is so Windows can find the DLL's when running our executables).
    </ol>

  @section create_doc Building the documentation (optional)

  This section is optional. If you can live with the online documentation, you do not need to build your own.

  In order to build the class documentation (<tt>doc</tt> & <tt>doc_internal</tt> targets), TOPP tutorials (<tt>doc_tutorials</tt> target) and more,
  you will need to install three programs:

  <ol>
    <li> Doxygen (1.8.16 is tested, others might work as well; older versions might produce errors or incomplete documentation due to lack of support for certain commands or bugs)
      <ul>
        <li> Download the installer for Windows (http://www.doxygen.org)
        <li> Execute the installer. It should automatically add doxygen.exe to the Windows PATH Environment (please recheck)
      </ul>
    <li> MikTeX (version 2.7 and 2.9 are tested, others might work as well, texlive is an option, too) - basic version (for DVIPS, LATEX etc).
      <ul>
         <li> Download binaries for Windows (http://miktex.org/)
         <li> During installation tick "install missing packages on the fly = yes"
         <li> The installer SHOULD add the bin directory of MikTeX automatically to the Windows PATH Environment (please recheck)
      </ul>
    <li> GPL Ghostscript (e.g. 8.60, 9.19) for Windows
      <ul>
         <li> Download binaries for Windows (http://www.ghostscript.com/) and install
         <li> Add the <i>&lt;path_to_GHOSTSCRIPT&gt;/bin</i> directory (e.g. `c:\programs\gs\gs8.60\bin`) to the Windows PATH Environment
      </ul>
    <li>
      Optional:<br>
        You can create dependency graphs using a doxygen plug-in called <tt>dot</tt>.
        <ul>
            <li> Download binaries for windows from http://www.graphviz.org (we tested: graphviz-2.18.exe)
            <li> The installer should have added dot.exe to the Windows PATH Environment (please recheck)
        </ul>
  </ol>

  You should install the above apps prior to installing %OpenMS (see below), because otherwise during the configuration step the documentation targets will be
  disabled.
  If you already have a working installation of %OpenMS (without documentation), you can simply install the above programs and reconfigure %OpenMS by calling <tt>cmake .</tt> in your build tree. No need to recompile the library!

  @section install_win_openms Installing OpenMS

    This part assumes section @ref install_win_contrib and @ref install_qt have been completed!
    I.e. we assume you have the %OpenMS source code and will now build the %OpenMS library, TOPP tools, class tests etc.    

    To create the build system:
    <ol>
      <li>Open a Visual Studio Command Line (use x64 version if you want 64bit apps -- and yes, you want that!)
      <li>Create a build directory for %OpenMS, e.g. <tt>mkdir OpenMS_build</tt>
      @note Due to Windows restrictions concerning the maximum length of a file path (of 260 characters) and the rather deep folder hierarchies created by CMake and Visual Studio, we advise to restrict the length of the base path to your build directory. We suggest less than 40 characters if possible.
      <li>Call CMake to create the build system
        \code
        cd <path_to_OpenMS_build>
        cmake -D OPENMS_CONTRIB_LIBS="<path_to_contrib_build>" -D CMAKE_PREFIX_PATH=<path_to_QT6_prefix> -G "<generator>" -A x64 -T host=x64 "<path_to_OpenMS>"
        \endcode

        The CMAKE_PREFIX_PATH should hold the path to your Qt6 build/binary directory where `Qt6Config.cmake` resides (see example below). Note that it is NOT the main Qt6 directory, 
        but the subfolder which is named after the toolchain it was build with (e.g. `CMAKE_PREFIX_PATH=C:\dev\qt6_2\6.7.3\msvc2019_64\lib\cmake\Qt6`).
        
        The choice of <tt>&lt;generator&gt;</tt> depends on your system. Type <tt>cmake --help</tt> to see a list of available generators.
        
        @note We strongly recommend the Visual Studio Generator and it should be identical to the one used for building the contrib. Other generators (such as nmake) are not supported! If you need compiling on the command line, you can use <tt>MSBuild</tt> also on VS solution files!
        Use the <tt>-A x64</tt> flag to build a 64-bit %OpenMS library and TOPP executables (32-bit does not really make any sense for LC-MS data processing)!
        The <tt>-T host=x64</tt> flag instructs Visual Studio to use a 64bit compiler and linker toolchain to avoid linker errors (<tt>LNK1210: exceeded internal ILK size limit; link with /INCREMNTAL:NO</tt>) during development (if the flag is omitted the 32bit toolchain is used to generate 64bit binaries).
        
        Example:

        \code
        cd c:\dev\OpenMS_build
        cmake -D OPENMS_CONTRIB_LIBS="C:\dev\contrib_build" -D CMAKE_PREFIX_PATH=C:\dev\qt6_2\6.7.3\msvc2019_64\lib\cmake\Qt6 -G "Visual Studio 16 2019" -A x64 -T host=x64 ../OpenMS
        \endcode

    </ol>
    
    \include{doc} "../doxygen/install/common-cmake-parameters.doxygen"

    Now there should be a <tt>OpenMS_host.sln</tt> file in your build directory, which you can open using Visual Studio.
    If you want to work on only a subset of %OpenMS (e.g., OpenMS_GUI) you can open the specific solution that you will find in the `src/` folder of your
    build folder and below (e.g. `src/openms_gui/OpenMS_GUI.sln`).


    Try to build the %OpenMS library - the target is called '%OpenMS'. This will create the %OpenMS Dll library. If you used the debug configuration it will be called
    `OpenMSd.dll`, in release mode its called `OpenMS.dll`.<br>
    As a last step you should add the location of the binaries (dll's and executables) to your PATH environment. This makes calling TOPPView and TOPP tools more convenient if you are working the command line.
    Also, external projects (see @subpage external_code) require the %OpenMS dll (OpenMS.dll or OpenMSd.dll) to be in the PATH. Depending on the generator and
    configuration used you will find the dll in [OpenMS_build]/bin/Release or [OpenMS_build]/bin/Debug (for VS) or just [OpenMS_build]/bin (nmake). In the same folder the
    TOPP tools will reside once build (see next section).
    Be aware that the order of directories in the PATH variable determines which dll or executable is used, if no absolute path was given when the executable was called.
    So the PATH might need to be updated (add/delete/reorder entries) if you are working with multiple installations or configurations of %OpenMS.

  @section install_win_topp Building the TOPP tools

    TOPP is a toolset for the analysis of HPLC-MS data. It consists of several small applications that can be chained to create analysis pipelines tailored for a specific problem.
    <br>
    <br>
    After you have built %OpenMS, you can build the TOPP tools
    by building the "TOPP" project in the IDE.
    <br>

  @section install_win_testing_openms Testing your OpenMS/TOPP installation

    Each class in %OpenMS and each TOPP tool has a unit test. The tests will be build with the complete solution. To specifically build and execute the tests,
    go to your %OpenMS build_tree and further into ./src/tests/class_tests. There you'll find an OpenMS_class_tests.sln file, which you can open.
    For other generators an equivalent file with another suffix will be present. Now, build the 'ALL_BUILD' target and the 'RUN_TESTS' target.
    You can also run the tests in a command prompt in &lt;OpenMS_build_tree&gt; using <tt>ctest</tt>.
    Single tests can be run with <tt>ctest -R &lt;testnameregex&gt;</tt>, e.g. <tt>ctest -R Base64_test</tt>.
    For more syntax on CTest look at the online documentation at http://cmake.org/.

  @section install_win_cmdline_openms Building OpenMS on the commandline

    The Visual Studio solution files can contain many targets, which makes the IDE a bit sluggish especially when starting up the first time.
    The %OpenMS class tests are by far the largest.

    If you just want to compile the library or executables, it's usually faster to use the commandline. Visual Studio solution files can be used here as well,
    as arguments to <tt>MSBuild.exe</tt>, e.g.
    \code
    MSBuild.exe <solution.sln> /maxcpucount /target:<target> /p:Configuration=<Config>
    \endcode
  
  Example:
  \code
  MSBuild.exe OpenMS_host.sln
  \endcode

    @note Since the call can be a bit lengthy, there is a batch file in
    <tt>OpenMS/tools/build.bat</tt> and in the root of your build tree (copied
    there by cmake for convenience), which allows to build the most important
    targets (TOPP, Gui, Tests, Doc) in Release or Debug using very short
    notation. Call it without arguments to see its usage help text. For example
    to build only the %OpenMS library in release mode, call

    \code
    build OpenMS r
    \endcode

  @section install_win_nonvs Advanced: Building OpenMS in any IDE (Example: Visual Studio Code)

    This section is for users that already have a little experience with IDEs like VS Code or JetBrains CLion.
    Especially the first step requires to read through the beginning of this documentation.
    <ol>
      <li> Download and install requirements (Git, CMake, 7zip, VS Build Tools, Qt) and make sure they are in your PATH
      <li> Download and install VS Code
      <li> Install C++ Extension Pack, CMake Tools, CMake Test Explorer and potentially some GitHub extensions
      <li> Ctrl+Shift+P and find <code>Git: clone</code>, then type and search for OpenMS/OpenMS. Select a folder. Wait for clone to finish. Open clone. Trust authors.
      <li> Open bash Terminal from within VS Code and type <code>source tools/loadvcvarsall.sh && load_msenv && git submodule update --init contrib && mkdir contrib-build && cd contrib-build && cmake -DBUILD_TYPE=ALL ../contrib</code>
      <li> Adapt (to your paths) and add
        \code
        "cmake.configureArgs": [
          "-DOPENMS_CONTRIB_LIBS=C:\\git\\contrib-build",
          "-DCMAKE_PREFIX_PATH=C:\\dev\\qt6_2\\6.7.3\\msvc2019_64\\lib\\cmake\\Qt6"
        ]
        \endcode
        to your settings or configure manually in your user-config.yml or via the VS Code command runner.
      <li> Ctrl+Shift+P and find <code>\> CMake: Select Kit</code>, select preferably "Visual Studio Build Tools Release 2022 - amd64"
      <li> Ctrl+Shift+P and find <code>\> CMake: Configure</code>
      <li> Select a build configuration and a target in the VS Code task bar (the usually blue bar on the very bottom of the program).
        The default target is all. Then press the gear for building, the play button for building and running (if it is an executable target),
        or the bug button for debugging.
      <li> Happy coding!
      <li> Bonus points for setting up Remote development for the Windows Subsystem for Linux and building for Windows and Linux in parallel. Beware of Windows line endings!
    </ol>

  @section install_win_create_installer Creating an installer 
  
    <ol>
      <li> Download <a href="https://github.com/OpenMS/NSIS" target="_blank">NSIS</a> (our special build with 8k-PATH support and a more modern UI). Extract the archive to an NSIS folder on your hard drive.
      <li> Add the NSIS folder (which contains 'makensis.exe') to your PATH, so CMake can find it.

      <li> Checkout the <a href="https://github.com/OpenMS/THIRDPARTY" target="_blank">THIRDPARTY GitHub Repository</a> and flatten the structure for the target platform, e.g. copy all subdirectories in <tt>./all/</tt> to <tt>./Windows/64bit/</tt>.

      <li> Configure %OpenMS as usual with additional flags <tt>SEARCH_ENGINES_DIRECTORY</tt> (for the flattened THIRDPARTY directory) and <tt>PACKAGE_TYPE="nsis"</tt>, 
      e.g.
      
      \code
      cd <build-tree>
      cmake ... -DSEARCH_ENGINES_DIRECTORY=C:\dev\THIRDPARTY\Windows\64bit -DPACKAGE_TYPE="nsis" <path-to-source-tree>
      \endcode
      
      <li> Build all targets (incl. 'doc' and 'doc_tutorials') in Release mode (copy the Qt6 plugin to the <code>[OpenMS_build]/bin/Release</code> and <code>[OpenMS_build]/doc/doxygen/parameters/Release/</code> directories first)
      \code
      cd <build-tree>
      build.bat - r
      \endcode

      <li> Create the installer package
      \code
      cd <build-tree>
      cmake --build . --target dist
      \endcode
    </ol>
  
*/
